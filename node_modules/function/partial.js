'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// @flow

var _argument_count = require('./_argument_count');
var _merge_arguments = require('./_merge_arguments');
var _PARTIAL_KEY = require('./_PARTIAL_KEY');

/**
 * Create a new version of the function where the given arguments are already filled in.
 */
module.exports = function partial(func /*:Function*/, args /*:Array<any>*/) /*:Function*/ {
	if (typeof func !== 'function') {
		throw new TypeError('Expected a function.');
	}
	if ((typeof args === 'undefined' ? 'undefined' : _typeof(args)) !== 'object' || args === null || !args.hasOwnProperty('length')) {
		throw new TypeError('Expected an iterable object.');
	}

	var args_ = void 0;
	var func_ = void 0;

	if (func.hasOwnProperty(_PARTIAL_KEY)) {
		var p = func[_PARTIAL_KEY];
		args_ = _merge_arguments(p.args, args);
		func_ = p.func;
	} else {
		args_ = args;
		func_ = func;
	}

	return Object.defineProperties(function partial() {
		var _partial$_PARTIAL_KEY = partial[_PARTIAL_KEY],
		    args = _partial$_PARTIAL_KEY.args,
		    func = _partial$_PARTIAL_KEY.func;

		return func.apply(this, _merge_arguments(args, arguments));
	}, _defineProperty({
		name: {
			value: func.name ? /^partial( |$)/.test(func.name) ? func.name : 'partial ' + func.name : 'partial',
			configurable: true
		},
		length: {
			value: Math.max(0, func.length - _argument_count(args_)),
			configurable: true
		}
	}, _PARTIAL_KEY, {
		value: {
			args: args_,
			func: func_
		},
		configurable: true
	}));
};
//# sourceMappingURL=partial.js.map